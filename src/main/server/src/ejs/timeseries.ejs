<!DOCTYPE html>
<html>
<head>
  <script type="text/javascript" src="/libs/d3.v3.min.js"></script>
  <script type="text/javascript" src="/libs/jquery.js"></script>
  <link rel="stylesheet" type="text/css" href="/css/timeseries.css"/></link>
</head>
<body>
</body>
<script type="text/javascript">
  
  function transformData(data) {
    data.forEach(function(d,i) {     
      d.date = d.date;
      d.value =+ d.value;    
    });
  }

  function setScaleDomains(data) {
    xScale.domain(d3.extent(data, function(d) { 
      return d.date; 
    }));

    yScale.domain([0, d3.max(data, function(d) { 
      return d.value; 
    })]);
  }

  var chart = <%- chart %>;

  //Set margins and sizes
  var margin = {
    top: 20,
    bottom: 50,
    right: 30,
    left: 50
  };
  
  var width = chart.width;
  var height = chart.height;
  
  //Create date parser
  var ParseDate = d3.time.format("%Q").parse;
  
  //Create x and y scale to scale inputs
  var xScale = d3.time.scale().range([0, width]);
  var yScale = d3.scale.linear().range([height, 0]);
  
  //Create x and y axes
  var xAxis = d3.svg.axis()
    .scale(xScale)
    .orient("bottom")
    .ticks(5);
  
  var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("left");
  
  //Create a area generator
  var area = d3.svg.area()
    .x(function(d){
      return xScale(d.date);
    })
    .y1(function(d){
      return yScale(d.value);
    });
  
  var data = chart.data
  
  transformData(data);

  setScaleDomains(data);

  area.y0(yScale(0));

  //Create an SVG element and append it to the DOM
  var svgElement = d3.select("body")
    .append("svg")
    .attr({"width": width + margin.left + margin.right, "height": height + margin.top + margin.bottom})
    .append("g")
    .attr("transform","translate(" + margin.left + "," + margin.top + ")");

  //append the svg path
  var path = svgElement.append("path")
    .attr("d", area(data))
    .attr("fill", "steelblue");
  
    //Add X Axis
  var x = svgElement.append("g")
    .attr("transform", "translate(0," + height + ")")
    .attr("class", "x axis")
    .call(xAxis);
  
  //Add Y Axis
  var y = svgElement.append("g")
    .call(yAxis)
    .attr("class", "y axis");
  
  //Add label to Y axis
  y.append("text")
    .attr("fill", "#000")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", "0.71em")
    .attr("text-anchor", "end")
    .text("value");



  // TODO:
  // provide means to limit the visible data
  function reloadChartData() {
    $.get("http://" + chart.host + "/charts/" + chart.id, function(newChart) {
      rerender(newChart);
    });
  }

  function rerender(newChart) {
    let data = newChart.data;

    if (newChart.visibleDatapointsLimit) {
      data = data.slice(-newChart.visibleDatapointsLimit);
    }
    
    // Transform the data again
    transformData(data);

    // Scale the range of the data again
    setScaleDomains(data);

    // Select the section we want to apply our changes to
    var svg = d3.select("body").transition();

    // Make the changes
    svg.select("path")
      .duration(1)
      .attr("d", area(data));

    svg.select(".y.axis")
      .duration(1)
      .call(yAxis);

    svg.select(".x.axis")
      .duration(1)
      .call(xAxis);
  }

  if (chart.dataRefreshInterval) {
    window.setInterval(reloadChartData, chart.dataRefreshInterval);
  }
</script>
</html>