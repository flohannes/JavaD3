<!DOCTYPE html>
<html>
<head>
  <script type="text/javascript" src="/unit/d3js/libs/d3.v3.min.js"></script>
  <script type="text/javascript" src="/unit/d3js/libs/jquery.js"></script>
  <style>
    body { 
      font: Arial 12px; 
      text-align: center;
      background-color: white;
    }

    .axis path, .axis line {
      fill: none;
      stroke: black;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <div id="chart-container"></div>
  <button id="start" onclick="start()">Start</button>
</body>
<script type="text/javascript">
  
  var currDataPoint = 0;

  //Create date parser
  var ParseDate = d3.time.format("%Y-%m-%d %H:%M:%S:%L").parse;

  function transformData(data) {
    data.forEach(function(d,i) {
      d.date = ParseDate(d.date);
      d.value =+ d.value;    
    });
  }

  function setXScaleDomain(data) {
    xScale.domain(d3.extent(data, function(d) { 
      return d.date; 
    }));
  }

  function setYScaleDomain(data) {
    yScale.domain([0, d3.max(data, function(d) { 
      return d.value; 
    })]);
  }

  function getVisibleDatapoints(chart) {
    if (chart.visibleDatapointsLimit) {
      var begin = currDataPoint - chart.visibleDatapointsLimit < 0 ? 0 : currDataPoint - chart.visibleDatapointsLimit;
      var end = currDataPoint + 1;

      return chart.data.slice(begin, end);
    }

    return chart.data.slice(0, currDataPoint + 1);
  }

  var chart = <%- chart %>;

  chart.width = chart.width ? Number(chart.width) : 1024;
  chart.height = chart.height ? Number(chart.height): 768;
  chart.dataRefreshInterval = chart.dataRefreshInterval ? Number(chart.dataRefreshInterval) : 1000;
  chart.visibleDatapointsLimit = chart.visibleDatapointsLimit ? Number(chart.visibleDatapointsLimit) : null;
  chart.data = chart.data.map(function(d) {
	  d.value = Number(d.value);
    return d;
  });

  //Set margins and sizes
  var margin = {
    top: 20,
    bottom: 50,
    right: 30,
    left: 50
  };
  
  var width = chart.width;
  var height = chart.height;
  
  //Create x and y scale to scale inputs
  var xScale = d3.time.scale().range([0, width]);
  var yScale = d3.scale.linear().range([height, 0]);
  
  //Create x and y axes
  var xAxis = d3.svg.axis()
    .scale(xScale)
    .orient("bottom")
    .tickFormat(d3.time.format("%Y-%m-%d %H:%M:%S"))
    .ticks(3);
  
  var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("left");
  
  //Create a area generator
  var area = d3.svg.area()
    .x(function(d){
      return xScale(d.date);
    })
    .y1(function(d){
      return yScale(d.value);
    });
  
  var data = chart.data;

  var visibleData = getVisibleDatapoints(chart);
  
  transformData(data);

  setXScaleDomain(visibleData);
  setYScaleDomain(data);

  area.y0(yScale(0));

  //Create an SVG element and append it to the DOM
  var svgElement = d3.select("#chart-container")
    .insert("svg:svg")
    .attr("id", "chart")
    .attr({"width": width + margin.left + margin.right, "height": height + margin.top + margin.bottom})
    .append("svg:g")
    .attr("transform","translate(" + margin.left + "," + margin.top + ")");
    
  //append the svg path
  var path = svgElement.append("svg:path")
    .attr("d", area(visibleData))
    .attr("fill", "steelblue")
    .attr("stroke", "steelblue")
    .attr("stroke-width", 1.5)
    .attr("stroke-linejoin", "round")
    .attr("stroke-linecap", "round");
    //.attr("d", line);
  
    //Add X Axis
  var x = svgElement.append("svg:g")
    .attr("transform", "translate(0," + height + ")")
    .attr("class", "x axis")
    .call(xAxis);
  
  //Add Y Axis
  var y = svgElement.append("svg:g")
    .call(yAxis)
    .attr("class", "y axis");
  
  //Add label to Y axis
  y.append("svg:text")
    .attr("fill", "#000")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", "0.71em")
    .attr("text-anchor", "end")
    .text("value");

  function rerender() {

    currDataPoint++;

    visibleData = getVisibleDatapoints(chart);

    // Scale the range of the data again
    setXScaleDomain(visibleData);
    //setYScaleDomain(visibleData);

    // Select the section we want to apply our changes to
    var svg = d3.select("#chart").transition();

    // Make the changes
    svg.select("path")
      .duration(chart.dataRefreshInterval)
      .attr("d", area(visibleData))
      .each('end', onTransitionEnd);
      

    svg.select(".y.axis")
      .duration(chart.dataRefreshInterval)
      .call(yAxis);

    svg.select(".x.axis")
      .duration(chart.dataRefreshInterval)
      .call(xAxis);
  }

  function onTransitionEnd() {
    if (currDataPoint >= data.length - 1) {
      endTime = Date.now();
      console.log("data max reached");
      console.log(endTime - startTime);
      sendStopEvent();
    } else {
      rerender();
    }
  }

  var startTime;
  var endTime;

  function start() {
    $("#start").prop("disabled", true);
    startTime = Date.now();
    rerender();
  }

  function sendStopEvent() {
    window.callPhantom({
      command: 'exit',
      reason: 'finished animation'
    })
  }
</script>
</html>