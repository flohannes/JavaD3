<!DOCTYPE html>
<html>
<head>

	<style>
	body {
		font: Arial 12px;
		text-align: center;
		background-color: white;
	}

	.axis path, .axis line {
		fill: none;
		stroke: black;
		stroke-width: 1;
		shape-rendering: crispEdges;
	}
	.axisText{
		font-size: 18px;
	}
	</style>
</head>
<body>
</body>

  <script type="text/javascript" src="/unit/d3js/libs/d3.v3.min.js"></script>
  <script type="text/javascript" src="/unit/d3js/libs/jquery.js"></script>

	<script type="text/javascript">

	const time = new Date();

		var chart = <%- chart %>

		//Set margins and sizes
		var margin = {
		top: 60,
		bottom: 50,
		right: 30,
		left: 50
		};

		var width = Number(chart.width) || 200;
		var height = Number(chart.height) || 200;
		//Create x and y scale to scale inputs
		var xScale = d3.scale.linear().domain([chart.minX||0, chart.maxX||0]).range([0, width]);
		var yScale = d3.scale.linear().domain([chart.maxY||200, chart.minY||200]).range([0, height]);

		function getVisibleCluster(chart) {
			var points = chart.data.points
			var cluster = chart.data.cluster;
			var visible = [];

			for (var key in cluster) {
				cluster[key].map(function(c){
					c.x = Number(c.x);
					c.y = Number(c.y);
					c.radius = Number(c.radius);
					visible.push(c);
					return c;
				});
			}
			return visible;
		}
		//Create x and y axes
		var xAxis = d3.svg.axis()
		    .scale(xScale)
		    .orient("bottom")
		    .ticks(10)
        .tickSize(2,0);


		var yAxis = d3.svg.axis()
		  .scale(yScale)
		  .orient("left")
      .ticks(5)
      .tickSize(2,0)

    d3.selectAll(".xAxis>.tick")
      .each(function(d, i){
        d3.select(this).style("font-size","4px");
      });

		//Read the data
		var points = chart.data.points;
		var data = points.map(function(d){
			d.x = Number(d.x);
			d.y = Number(d.y);
			d.radius = Number(d.radius);
			return d;
		});

		var visibleCluster = getVisibleCluster(chart);
		var visibleData = data.concat(visibleCluster);

		var clusterColor = chart.clusterColor || "#8dd6d1";
		var pointColor = chart.pointColor || "#c26969";

		// append the svg object to the body of the page
		var svg = d3.select("body")
		  .append("svg")
		    .attr("width", width + margin.left + margin.right)
		    .attr("height", height + margin.top + margin.bottom)
		  .append("g")
		    .attr("transform",
		          "translate(" + margin.left + "," + margin.top + ")");

		svg.append("text")
					.attr("x", (width / 2))
					.attr("y", 0 - (margin.top / 2))
					.attr("text-anchor", "middle")
					.style("font-size", "30px")
					.text(chart.title);

		svg.append("text")
				.attr("id", "timeStamp")
				.attr("x", (width / 2))
				.attr("y", margin.top-16+height)
				.attr("text-anchor", "middle")
				.style("font-size", "20px")
				.text(visibleData[visibleData.length-1].timeStamp);

		var path = svg.append('g')
		    .selectAll("circle")
		    .data(visibleData)
		    .enter()
		    .append("circle")
		      .attr("cx", function (d) { return xScale(d.x) } )
		      .attr("cy", function (d) { return yScale(d.y) } )
		      .attr("r", function (d) { return  (d.radius>0 ? (xScale(d.radius+d.x)-xScale(d.x)) : xScale(0.2+d.x)-xScale(d.x))})
		      .style("fill", function(d) {
		      if(d.radius > 0){
		       return "none";
		      } else{
		        return pointColor;
		      }
		      })
		      .style("stroke", function(d) {
		      if(d.radius > 0){
		       return clusterColor;
		      } else{
		        return "none";
		      }
		      })
          .style("stroke-width", 0.5)

	  //Add X Axis
		var x = svg.append("g")
		  .attr("transform", "translate(0," + height + ")")
		  .attr("class", "x axis")
		  .call(xAxis);

	  // Add Y axis
		var y = svg.append("g")
		    .call(yAxis)
		    .attr("class", "y axis");

		//Add label to Y axis
	  x.append("svg:text")
	    .attr("fill", "#000")
	    .attr("class", "axisText")
	    .attr("text-anchor", "end")
	    .attr("dy", "-0.71em")
	    .attr("x", width)
	    .text(chart.yLabel|| "");

	  //Add label to Y axis
	  y.append("svg:text")
	    .attr("fill", "#000")
	    .attr("class", "axisText")
	    .attr("transform", "rotate(-90)")
	    .attr("y", 6)
	    .attr("dy", "0.71em")
	    .attr("text-anchor", "end")
	    .text(chart.yLabel|| "");

		// var endtime = new Date();
		// console.log("result", endtime.getTime() - time.getTime() );

	</script>
</html>
