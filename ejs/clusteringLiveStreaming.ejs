<!DOCTYPE html>
<html>
<head>

	<style>
	body {
		font: Arial 12px;
		text-align: center;
		background-color: white;
	}

	.axis path, .axis line {
		fill: none;
		stroke: black;
		stroke-width: 1;
		shape-rendering: crispEdges;
	}
	.axisText{
		font-size: 18px;
	}
	</style>
</head>
<body>
	<div id="chart-container"></div>
</body>
  <script type="text/javascript" src="/unit/d3js/libs/d3.v3.min.js"></script>
  <script type="text/javascript" src="/unit/d3js/libs/jquery.js"></script>

	<script type="text/javascript">


	function getVisibleDatapoints(chart) {
		// get always the last datapoint and then count backwards
		var visible;
		var length = chart.data.points.length;

		if (chart.visibleDatapointsLimit) {
			var begin = length - chart.visibleDatapointsLimit < 0 ? 0 : length - chart.visibleDatapointsLimit;
			visible = chart.data.points.slice(begin, length)
		}else{
			visible = chart.data.points.slice(0, length)
		}

		// format the points
		visible = visible.map(function(d) {
			d.x = Number(d.x);
			d.y = Number(d.y);
			d.radius = Number(d.radius);
			return d;
		});

		return visible;
	}

	function getVisibleCluster(chart) {
		var points = chart.data.points
		var visible = chart.data.cluster[points[points.length-1].timeStamp];
		visible = visible.map(function(c) {
				c.x = Number(c.x);
				c.y = Number(c.y);
				c.radius = Number(c.radius);
				return c;
		});
		return visible;
	}

	var chart = <%- chart %>;
	var id = <%- id %>
	chart.width = chart.width ? Number(chart.width) : 1024;
	chart.height = chart.height ? Number(chart.height): 768;
	chart.dataRefreshInterval = chart.dataRefreshInterval ? Number(chart.dataRefreshInterval) : 1000;
	chart.visibleDatapointsLimit = chart.visibleDatapointsLimit ? Number(chart.visibleDatapointsLimit) : null;

	//Set margins and sizes
	var margin = {
		top: 60,
		bottom: 50,
		right: 30,
		left: 50
	};

	var width = chart.width;
	var height = chart.height;

	//Create x and y scale to scale inputs
	var xScale = d3.scale.linear().domain([chart.minX, chart.maxX]).range([0, width]);
	var yScale = d3.scale.linear().domain([chart.maxY, chart.minY]).range([0, height]);

	//Create x and y axes
	//Create x and y axes
	var xAxis = d3.svg.axis()
			.scale(xScale)
			.orient("bottom")
			.ticks(10)
			.tickSize(2,0);


	var yAxis = d3.svg.axis()
		.scale(yScale)
		.orient("left")
		.ticks(5)
		.tickSize(2,0)


	d3.selectAll(".xAxis>.tick")
		.each(function(d, i){
			d3.select(this).style("font-size","4px");
		});

	var data = chart.data.points;
	var visiblePoints = getVisibleDatapoints(chart);
	var visibleCluster = getVisibleCluster(chart);
	var visibleData = visiblePoints.concat(visibleCluster);

	var clusterColor = chart.clusterColor || "#8dd6d1";
	var pointColor = chart.pointColor || "#c26969";

	//Create an SVG element and append it to the DOM
	var svg = d3.select("#chart-container")
		.insert("svg:svg")
		.attr("id", "chart")
		.attr({"width": width + margin.left + margin.right, "height": height + margin.top + margin.bottom})
		.append("svg:g")
		.attr("transform","translate(" + margin.left + "," + margin.top + ")");

	svg.append("text")
				.attr("x", (width / 2))
				.attr("y", 0 - (margin.top / 2))
				.attr("text-anchor", "middle")
				.style("font-size", "30px")
				.text(chart.title);

	svg.append("text")
			.attr("id", "timeStamp")
			.attr("x", (width / 2))
			.attr("y", margin.top-16+height)
			.attr("text-anchor", "middle")
			.style("font-size", "20px")
			.text(visibleData[visibleData.length-1].timeStamp);

			var path = svg.append('g')
					.selectAll("circle")
					.data(visibleData)
					.enter()
					.append("circle")
						.attr("cx", function (d) { return xScale(d.x) } )
						.attr("cy", function (d) { return yScale(d.y) } )
						.attr("r", function (d) { return (d.radius>0 ? (xScale(d.radius+d.x)-xScale(d.x)) : xScale(0.2+d.x)-xScale(d.x) )})
						.style("fill", function(d) {
						if(d.radius > 0){
						 return "none";
						} else{
							return pointColor;
						}
						})
						.style("stroke", function(d) {
						if(d.radius > 0){
						 return clusterColor;
						} else{
							return "none";
						}
						})
						.style("stroke-width", 0.5)

		//Add X Axis
	var x = svg.append("svg:g")
		.attr("transform", "translate(0," + height + ")")
		.attr("class", "x axis")
		.call(xAxis);

	//Add Y Axis
	var y = svg.append("svg:g")
		.call(yAxis)
		.attr("class", "y axis");

		//Add label to Y axis
	  x.append("svg:text")
	    .attr("fill", "#000")
	    .attr("class", "axisText")
	    .attr("text-anchor", "end")
	    .attr("dy", "-0.71em")
	    .attr("x", width)
	    .text(chart.yLabel|| "");

	  //Add label to Y axis
	  y.append("svg:text")
	    .attr("fill", "#000")
	    .attr("class", "axisText")
	    .attr("transform", "rotate(-90)")
	    .attr("y", 6)
	    .attr("dy", "0.71em")
	    .attr("text-anchor", "end")
	    .text(chart.yLabel|| "");


	  function reloadChartData() {
	    $.get("http://localhost:8000/data/"+id ,function(newChart) {
	      rerender(newChart);
	    });
	  }

		function rerender(newChart) {

			visiblePoints = getVisibleDatapoints(newChart);
			visibleCluster = getVisibleCluster(newChart);
			visibleData = visiblePoints.concat(visibleCluster);
			// Select the section we want to apply our changes to
			// var svg = d3.select("#chart").transition();

			var timeStamp = svg.select("#timeStamp").text(visibleData[visibleData.length-1].timeStamp);

			svg.select("g").selectAll("circle").remove();
			var circle = svg.select('g')
					.selectAll("circle")
					.data(visibleData)
					.enter()
					.append("circle")
						.attr("cx", function (d) { return xScale(d.x) } )
						.attr("cy", function (d) { return yScale(d.y) } )
						.attr("r", function (d) { return (d.radius>0 ? (xScale(d.radius+d.x)-xScale(d.x)) : xScale(0.2+d.x)-xScale(d.x) )})
						.style("fill", function(d) {
						if(d.radius > 0){
						 return "none";
						} else{
							return pointColor;
						}
						})
						.style("stroke", function(d) {
						if(d.radius > 0){
						 return clusterColor;
						} else{
							return "none";
						}
						})
						.style("stroke-width", 0.5)

		}

	  if (chart.dataRefreshInterval) {
	    window.setInterval(reloadChartData, chart.dataRefreshInterval);
	  }

	</script>
</html>
